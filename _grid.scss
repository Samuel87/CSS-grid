@mixin make-utilities($grid-size) {
    .hide#{$grid-size}      { display: none !important; }
    .show#{$grid-size}      { display: block !important; }
    .visible#{$grid-size}   { visibility: visible !important; }
    .invisible#{$grid-size} { visibility: hidden !important; }
    .flex#{$grid-size}      { display: flex !important; }
}

@mixin make-column-classes($grid-size) {
    .#{$grid-class}#{$grid-size}-auto {
        -ms-flex: 0 0 auto;
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    .#{$grid-class}#{$grid-size}-equal {
        -ms-flex-preferred-size: 0;
        flex-basis: 0;
        -ms-flex-positive: 1;
        flex-grow: 1;
        max-width: 100%;
    }

    .#{$grid-class}#{$grid-size}-order-first {
        -ms-flex-order: -1;
        order: -1;
    }

    @for $i from 1 to $total-grid-columns {
        $percentage: percentage($i / $grid-max-columns);

        .#{$grid-class}#{$grid-size}-#{$i} {
            -ms-flex: 0 0 $percentage;
            flex: 0 0 $percentage;
            max-width: $percentage;
        }

        .#{$grid-class}#{$grid-size}-order-#{$i} {
            -ms-flex-order: $i;
            order: $i;
        }

        @if $i < ($total-grid-columns - 1) {
            .#{$grid-class}#{$grid-size}-offset-#{$i} {
                margin-left: $percentage;
            }
        }
    }
}

@-ms-viewport {
    width: device-width;
}

html {
    box-sizing: border-box;
    -ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

.container {
    padding-right: $gutter-width;
    padding-left: $gutter-width;
    margin-right: auto;
    margin-left: auto;

    @each $media-size in $media-sizes {
        @if $media-size != 0 {
            @media (min-width: #{$media-size}) {
                max-width: nth($container-sizes, index($media-sizes, $media-size));
            }
        }
    }

    @media (min-width: $container-extended-breakpoint) {
        .container--extended {
            max-width: $container-extended-max-width;
        }
    }
}

.container-fluid {
    width: 100%;
    padding-right: $gutter-width;
    padding-left: $gutter-width;
    margin-right: auto;
    margin-left: auto;
}

.container--no-gutter {
    padding-right: 0;
    padding-left: 0;
}

.grid {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-right: -$gutter-width;
    margin-left: -$gutter-width;

    &.grid--no-gutter {
        margin-right: 0;
        margin-left: 0;

        > [class*="grid__col-"] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

%flex-utility {
    flex-wrap: wrap;

    &.flex--column {
        flex-direction: column;
    }
}

@each $grid-size in $grid-sizes {
    .flex#{$grid-size} {
        @extend %flex-utility;
    }
}


%grid__col {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-right: $gutter-width;
    padding-left: $gutter-width;
}

@each $grid-size in $grid-sizes {
    @for $i from 1 to $total-grid-columns {
        .#{$grid-class}#{$grid-size}-#{$i} {
            @extend %grid__col;
        }
    }

   .#{$grid-class}#{$grid-size}-auto {
        @extend %grid__col;
    }

   .#{$grid-class}#{$grid-size}-equal {
        @extend %grid__col;
    }
}

@each $media-size in $media-sizes {
    $grid-size: nth($grid-sizes, index($media-sizes, $media-size));

    @if $media-size != 0 {
        @media (min-width: #{$media-size}) {
            @include make-column-classes($grid-size);
            @include make-utilities($grid-size);
        }

    } @else {
        @include make-column-classes($grid-size);
        @include make-utilities($grid-size);
    }
}

/*
 * Add break between grid__col-equal columns in grid to
 * break into a new line ex. 2x2 grid: col col break col col
 */

.grid__col-equal-break {
    width: 100%;
}

/*
 * Static class when using large absolute positioned columns
 */

.grid__col-static {
    position: static;
}

/*
 * Content positioning, add mostly to grid__col elements
 */

.content-top,
.content-bottom,
.content-right,
.content-v-center,
.content-h-center,
.content-center,
.content-spaced {
    display: flex;

    &.container {
        height: 100%;
    }
}

.content-top {
    align-items: flex-start;
}

.content-bottom {
    align-items: flex-end;
}

.content-right {
    justify-content: flex-end;
}

.content-v-center {
    align-items: center;
}

.content-h-center {
    justify-content: center;
}

.content-center {
    justify-content: center;
    align-items: center;
}

.content-spaced {
    justify-content: space-between;
}

/*
 * Add this class to containers for smoother breaking.
 */

.fluid-break {
    -webkit-transition: $transition-base;
    -moz-transition: $transition-base;
    -ms-transition: $transition-base;
    -o-transition: $transition-base;
    transition: $transition-base;
}
